import React, { Fragment, useEffect, useState} from 'react'
import { Link } from 'react-router-dom'
import { connect } from 'react-redux'
import PropTypes from 'prop-types'
import _ from 'lodash'
import Spinner from '../../commons/spinner'
import { getLeads } from '../../../actions/leads'
import { paginateData, setSort } from '../../../actions/paginate'
import Pagination from '../../commons/pagination'
import LeadsTable from '../leads/LeadsTable'


const Leads = ({getLeads, auth : {user}, leads: {lead, loading}, paginateData, setSort, paginate: {pageSize, currentPage, data, sort}}) =>{
    const [orderBy, setSortBy] = useState({ path : 'name', order: 'asc'})
    
    useEffect(()=>{ getLeads()}, [])   

    const handlePageChange = (page) =>{   
          paginateData(lead, page, orderBy)
    }

    const handleSort = (path) =>{
        let order = '' 
        console.log(path)       
        //if(orderBy.path === path) order = (orderBy.order === 'asc') ? order = 'desc' : order = 'asc'
        if(orderBy.path === path) order = (orderBy.order === 'asc') ? setSortBy({path: 'name', order: 'desc'}) : setSortBy({path: 'name', order: 'asc'})
        console.log(order)
       // setSortBy({path: 'name', order: order})
        console.log(orderBy)               
        //paginateData(lead, currentPage, orderBy)

    }
     
    
    return(
        <Fragment>
            <h1>Leads Page</h1>
            <Link to="/leadform" className="btn btn-primary my-1">Add New Lead</Link>
            {loading ? <Spinner/> :
                <Fragment>                   
                    <h1>Leads:</h1>
                    <div>
                    { lead.length > 0 ? (
                        <LeadsTable data={data} onSort={handleSort} />
                    ) : <p>No Leads</p>}               
                    </div>
                </Fragment>
            }
             <Pagination  itemsCount={lead === null ? 0 : lead.length} pageSize={pageSize} currentPage={currentPage} onPageChange={handlePageChange}  />
        </Fragment>
    )
}

Leads.propTypes ={
    getLeads : PropTypes.func.isRequired,
    paginateData: PropTypes.func.isRequired
}

const mapStateToProps = state =>({
    auth : state.auth,
    leads: state.leads,
    paginate: state.paginate
})
export default connect(mapStateToProps, {getLeads, paginateData, setSort})(Leads)